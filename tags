!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Buffer	capture.cpp	/^struct Buffer$/;"	s	file:
Buffer	capture.cpp	/^typedef struct Buffer Buffer;$/;"	t	typeref:struct:Buffer	file:
CXXFLAGS	makefile	/^CXXFLAGS=	-c -g -O0 -fPIC$/;"	m
Ctx	capture.cpp	/^struct Ctx$/;"	s	file:
Ctx	capture.cpp	/^typedef struct Ctx Ctx;$/;"	t	typeref:struct:Ctx	file:
Ctx	sender.cpp	/^struct Ctx$/;"	s	file:
Ctx	sender.cpp	/^typedef struct Ctx Ctx;$/;"	t	typeref:struct:Ctx	file:
Ctx	vcompress.cpp	/^struct Ctx$/;"	s	file:
Ctx	vshow.cpp	/^struct Ctx$/;"	s	file:
Ctx	vshow.cpp	/^typedef struct Ctx Ctx;$/;"	t	typeref:struct:Ctx	file:
LIBS_SERVER	makefile	/^LIBS_SERVER=	-lavcodec -lswscale -lavutil -lx264 -lpthread$/;"	m
LIBS_SHOWER	makefile	/^LIBS_SHOWER=    -lavcodec -lswscale -lavutil -lX11 -lXext$/;"	m
MIN	vshow.cpp	/^inline int MIN(int a, int b)$/;"	f
OBJS_SERVER	makefile	/^OBJS_SERVER=	capture.o vcompress.o sender.o server.o$/;"	m
OBJS_SHOWER	makefile	/^OBJS_SHOWER= 	vshow.o recver.o shower.o$/;"	m
Picture	types.h	/^struct Picture$/;"	s
Picture	types.h	/^typedef struct Picture Picture;$/;"	t	typeref:struct:Picture
RECV_PORT	shower.cpp	23;"	d	file:
TARGET_IP	server.cpp	22;"	d	file:
TARGET_PORT	server.cpp	23;"	d	file:
VIDEO_FPS	server.cpp	20;"	d	file:
VIDEO_HEIGHT	server.cpp	19;"	d	file:
VIDEO_WIDTH	server.cpp	18;"	d	file:
__recver__hh	recver.h	2;"	d
_capture__hh	capture.h	2;"	d
_save_pic	capture.cpp	/^static void _save_pic (void *start, int len)$/;"	f	file:
_sender__hh	sender.h	2;"	d
_types__hh	types.h	2;"	d
_vcompress__hh	vcompress.h	2;"	d
_vshow__hh	vshow.h	2;"	d
bufs	capture.cpp	/^	Buffer bufs[2];		\/\/ 用于 mmap$/;"	m	struct:Ctx	file:
bytesperrow	capture.cpp	/^	int bytesperrow; \/\/ 用于cp到 pic_src$/;"	m	struct:Ctx	file:
capture_close	capture.cpp	/^int capture_close (void *id)$/;"	f
capture_get_output_ptr	capture.cpp	/^int capture_get_output_ptr (void *c, unsigned char***ptr, int **ls)$/;"	f
capture_get_picture	capture.cpp	/^int capture_get_picture (void *id, Picture *pic)$/;"	f
capture_open	capture.cpp	/^void *capture_open (const char *dev_name, int t_width, int t_height, PixelFormat tarfmt)$/;"	f
curr	vcompress.cpp	/^static int64_t curr ()$/;"	f	file:
curr_height	vshow.cpp	/^	int curr_width, curr_height;$/;"	m	struct:Ctx	file:
curr_width	vshow.cpp	/^	int curr_width, curr_height;$/;"	m	struct:Ctx	file:
data	types.h	/^	unsigned char *data[4];$/;"	m	struct:Picture
display	vshow.cpp	/^	Display *display;$/;"	m	struct:Ctx	file:
dumpnal	vcompress.cpp	/^static void dumpnal (x264_nal_t *nal)$/;"	f	file:
dumpnals	vcompress.cpp	/^static void dumpnals (int type, x264_nal_t *nal, int nals)$/;"	f	file:
encode_nals	vcompress.cpp	/^static int encode_nals (Ctx *c, x264_nal_t *nals, int nal_cnt)$/;"	f	file:
first_pts	vcompress.cpp	/^static int64_t first_pts (struct Ctx *ctx)$/;"	f	file:
fmt	capture.cpp	/^        PixelFormat fmt;$/;"	m	struct:Ctx	file:
force_keyframe	vcompress.cpp	/^	int force_keyframe;$/;"	m	struct:Ctx	file:
gc	vshow.cpp	/^	GC gc;$/;"	m	struct:Ctx	file:
get_pts	vcompress.cpp	/^	int64_t (*get_pts)(struct Ctx *);$/;"	m	struct:Ctx	file:
height	capture.cpp	/^	int width, height;	\/\/ 输出图像大小$/;"	m	struct:Ctx	file:
image	vshow.cpp	/^	XImage *image;$/;"	m	struct:Ctx	file:
info_dts	vcompress.cpp	/^	int64_t info_pts, info_dts;$/;"	m	struct:Ctx	file:
info_key_frame	vcompress.cpp	/^	int info_key_frame;$/;"	m	struct:Ctx	file:
info_pts	vcompress.cpp	/^	int64_t info_pts, info_dts;$/;"	m	struct:Ctx	file:
info_valid	vcompress.cpp	/^	int info_valid;$/;"	m	struct:Ctx	file:
length	capture.cpp	/^	size_t length;$/;"	m	struct:Buffer	file:
main	server.cpp	/^int main (int argc, char **argv)$/;"	f
main	shower.cpp	/^int main (int argc, char **argv)$/;"	f
next_pts	vcompress.cpp	/^static int64_t next_pts (struct Ctx *ctx)$/;"	f	file:
output	vcompress.cpp	/^	void *output;		\/\/ 用于保存编码后的完整帧$/;"	m	struct:Ctx	file:
output_bufsize	vcompress.cpp	/^	int output_bufsize, output_datasize;$/;"	m	struct:Ctx	file:
output_datasize	vcompress.cpp	/^	int output_bufsize, output_datasize;$/;"	m	struct:Ctx	file:
param	vcompress.cpp	/^	x264_param_t param;$/;"	m	struct:Ctx	file:
pic_src	capture.cpp	/^	AVPicture pic_src, pic_target;	\/\/ 用于 sws_scale$/;"	m	struct:Ctx	file:
pic_target	capture.cpp	/^	AVPicture pic_src, pic_target;	\/\/ 用于 sws_scale$/;"	m	struct:Ctx	file:
pic_target	vshow.cpp	/^	AVPicture pic_target;$/;"	m	struct:Ctx	file:
picture	vcompress.cpp	/^	x264_picture_t picture;$/;"	m	struct:Ctx	file:
pts	vcompress.cpp	/^	int64_t pts; 		\/\/ 输入 pts$/;"	m	struct:Ctx	file:
rows	capture.cpp	/^	int rows;	\/\/ 用于 sws_scale()$/;"	m	struct:Ctx	file:
screen	vshow.cpp	/^	int screen;$/;"	m	struct:Ctx	file:
segment	vshow.cpp	/^	XShmSegmentInfo segment;$/;"	m	struct:Ctx	file:
sender_close	sender.cpp	/^void sender_close (void *snd)$/;"	f
sender_open	sender.cpp	/^void *sender_open (const char *ip, int port)$/;"	f
sender_send	sender.cpp	/^int sender_send (void *snd, const void *data, int len)$/;"	f
sock	sender.cpp	/^	int sock;$/;"	m	struct:Ctx	file:
start	capture.cpp	/^	void *start;$/;"	m	struct:Buffer	file:
stride	types.h	/^	int stride[4];$/;"	m	struct:Picture
sws	capture.cpp	/^	struct SwsContext *sws;	\/\/ 用于转换$/;"	m	struct:Ctx	typeref:struct:Ctx::SwsContext	file:
sws	vshow.cpp	/^	SwsContext *sws;$/;"	m	struct:Ctx	file:
target	sender.cpp	/^	sockaddr_in target;$/;"	m	struct:Ctx	file:
target_pixfmt	vshow.cpp	/^	PixelFormat target_pixfmt;$/;"	m	struct:Ctx	file:
v_height	vshow.cpp	/^	int v_width, v_height;$/;"	m	struct:Ctx	file:
v_width	vshow.cpp	/^	int v_width, v_height;$/;"	m	struct:Ctx	file:
vc_close	vcompress.cpp	/^int vc_close (void *ctx)$/;"	f
vc_compress	vcompress.cpp	/^int vc_compress (void *ctx, unsigned char *data[4], int stride[4], const void **out, int *len)$/;"	f
vc_force_keyframe	vcompress.cpp	/^int vc_force_keyframe (void *ctx)$/;"	f
vc_get_last_frame_info	vcompress.cpp	/^int vc_get_last_frame_info (void *ctx, int *key_frame, int64_t *pts, int64_t *dts)$/;"	f
vc_open	vcompress.cpp	/^void *vc_open (int width, int height, double fps)$/;"	f
vid	capture.cpp	/^	int vid;$/;"	m	struct:Ctx	file:
vinfo	vshow.cpp	/^	XVisualInfo vinfo;$/;"	m	struct:Ctx	file:
vs_close	vshow.cpp	/^int vs_close (void *ctx)$/;"	f
vs_open	vshow.cpp	/^void *vs_open (int v_width, int v_height)$/;"	f
vs_show	vshow.cpp	/^int vs_show (void *ctx, unsigned char *data[4], int stride[4])$/;"	f
width	capture.cpp	/^	int width, height;	\/\/ 输出图像大小$/;"	m	struct:Ctx	file:
window	vshow.cpp	/^	Window window;$/;"	m	struct:Ctx	file:
x264	vcompress.cpp	/^	x264_t *x264;$/;"	m	struct:Ctx	file:
